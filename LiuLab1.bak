;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname LiuLab1) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
; Fare un check dei due soggetti se sono prulari e se il primo soggetto è prulare allora verbo aggiungerà "no" alla fine
; Convertire da infinito a presente "are->a" "ere->e" "ire->e"
; Un cond che fa string append
; Soggetto1 è unico con l'articolo, come soggetto2

(define unione
  (lambda (Soggetto1 Verbo Soggetto2)
    (string-append Soggetto1 " " Verbo " " Soggetto2)
    ))

(define main ; restituisce la frase 
  (lambda (Soggetto1 Verbo Soggetto2) ; richiede 2 soggetti e 1 verbo
    (let ((Last_L (string-ref Soggetto1 (- (string-length Soggetto1)1))))
      (cond [(char=? Last_L #\e) (and aggiungi_art_prl (Soggetto1) coniugare_verb_prl (Verbo))]
            [(char=? Last_L #\i) (and aggiungi_art_prl (Soggetto1) coniugare_verb_prl (Verbo))]
            [(char=? Last_L #\o) (and aggiungi_art_sin (Soggetto1) coniugare_verb_sin (Verbo))]
            [(char=? Last_L #\a) (and aggiungi_art_sin (Soggetto1) coniugare_verb_sin (Verbo))]
    )
  )
))
   

(define aggiungi_art_prl
  (lambda (Sog)
    (let ((Last_L (string-ref Sog (- (string-length Sog)1))))
      (if (char=? Last_L #\e)
    (string-append "le" " " Sog)
    (string-append "i" " " Sog)
      )
    )
  )
  )

(define aggiungi_art_sin
  (lambda (Sog)
    (let ((Last_L (string-ref Sog (- (string-length Sog)1))))
      (if (char=? Last_L #\o)
    (string-append "il" " " Sog)
    (string-append "la" " " Sog)
      )
    )
  )
  )

(define coniugare_verb_prl
  (lambda (verb)
    (let ((Verb_L (string-ref verb (- (string-length verb)3)))
          (Sub_re (substring verb (- (string-length verb)4) string-length)))
      (cond [(char=? Verb_L #\a) (string-append Sub_re "ano")]
          (else (string-append Sub_re "ono")
                )
          )
      )
    )
  )

(define coniugare_verb_sin
  (lambda (verb)
    (let ((Verb_L (string-ref verb (- (string-length verb)3))))
         (substring verb (- (string-length verb)4) string-length)
      
    )
  )
  )



      